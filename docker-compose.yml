# To run from IntelliJ, enable Advanced/Allow the default Docker socket to be used in Docker Desktop settings.
services:

  db:
    # image: postgres
    build:
      context: .
      dockerfile: ./docker/db.Dockerfile
    restart: always
    environment:
      # Defaults, creates a database and an user if they don't already exist in Postgres
      POSTGRES_USER: greeting
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: example
    # Expose ports so that we can create the database with gradle
    ports:
      - 5432:5432


  # Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 16686:16686
      - 14268:14268
    hostname: jaeger


  # Our greeting service / app
  # From https://www.split.io/blog/containerization-spring-boot-docker/
  # Should be replaced(?) by com.palantir.docker/docker-compose
  # For now build with `./gradlew build` then `docker compose up` from the project root directory
  # See also app.Dockerfile
  # The service should wait(?) for its dependencies, this is done with something like wait-for-it.sh
  # or with [testcontainers](https://java.testcontainers.org/)
  app:
    build:
      context: .
      dockerfile: ./docker/app.Dockerfile
    restart: on-failure
    depends_on:
      - jaeger
      - db
    ports:
      - 8080:8080
